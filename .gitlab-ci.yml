# © 2020 ETH Zurich, Mechanics and Materials Lab
# © 2020 California Institute of Technology
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

stages:
    - image
    - analyze
    - build

image-debian:
    stage: image
    image:
        name: gcr.io/kaniko-project/executor:debug
        entrypoint:
            - ""
    script:
        - mkdir -p /kaniko/.docker
        - >
            printf \
                '{"auths": {"%s": {"username": "%s", "password": "%s"}}}' \
                "$CI_REGISTRY" \
                "$CI_REGISTRY_USER" \
                "$CI_REGISTRY_PASSWORD" > /kaniko/.docker/config.json
        - >
            /kaniko/executor \
                --cache-ttl=730h \
                --cache=true \
                --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG \
                --dockerfile docker/Dockerfile

check-code-format:
    stage: analyze
    image: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    script:
        - >
            find . \
                -name "*.h" -print0 \
                -o \
                -name "*.cc" -print0 | \
            xargs -0 -I {} -P $(nproc) \
                bash -c 'diff <(cat {}) <(clang-format {})'

build-debian:
    stage: build
    image: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    before_script:
        - >
            bash -c '
                cd $(mktemp -d) &&
                cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="--coverage" /usr/src/googletest &&
                cmake --build . &&
                cmake --build . --target install &&
                rm -rf $PWD
            '
    script:
        - useradd developer
        - mkdir build
        - chown developer:developer build
        - >
            su developer -c '
                cd build
                cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="--coverage" .. &&
                cmake --build . --target all &&
                GTEST_OUTPUT="xml:gtest-results.xml" ctest --output-on-failure --exclude-regex ".*_mpi$" &&
                ctest --output-on-failure --tests-regex ".*_mpi$" &&
                python3 -m gcovr --print-summary --sonarqube coverage.xml -j$(nproc) --root .. .
            '
    artifacts:
        reports:
            cobertura: build/coverage.xml
            junit: build/*/test/gtest-results.xml
        when: always
