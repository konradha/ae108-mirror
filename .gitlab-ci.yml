# © 2020 ETH Zurich, Mechanics and Materials Lab
# © 2020 California Institute of Technology
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

stages:
    - image-dev
    - image-docu
    - analyze
    - build

.build-image: &build-image
    image:
        name: gcr.io/kaniko-project/executor:debug
        entrypoint:
            - ""
    script:
        - mkdir -p /kaniko/.docker
        - >
            printf \
                '{"auths": {"%s": {"username": "%s", "password": "%s"}}}' \
                "$CI_REGISTRY" \
                "$CI_REGISTRY_USER" \
                "$CI_REGISTRY_PASSWORD" > /kaniko/.docker/config.json
        - >
            /kaniko/executor \
                --build-arg PETSC_SCALAR_TYPE=$PETSC_SCALAR_TYPE \
                --cache-ttl=730h \
                --cache=true \
                --destination $CI_REGISTRY_IMAGE/$IMAGE_NAME:$CI_COMMIT_REF_SLUG \
                --dockerfile docker/$DOCKERFILE_NAME

build-image-dev-real:
    stage: image-dev
    variables:
        DOCKERFILE_NAME: "Dockerfile"
        PETSC_SCALAR_TYPE: "real"
        IMAGE_NAME: "dev-real"
    <<: *build-image

build-image-dev-complex:
    stage: image-dev
    variables:
        DOCKERFILE_NAME: "Dockerfile"
        PETSC_SCALAR_TYPE: "complex"
        IMAGE_NAME: "dev-complex"
    <<: *build-image

build-image-docu:
    stage: image-docu
    variables:
        DOCKERFILE_NAME: "Dockerfile_docu"
        IMAGE_NAME: "docu"
    <<: *build-image

check-code-format:
    stage: analyze
    image: $CI_REGISTRY_IMAGE/dev-real:$CI_COMMIT_REF_SLUG
    script:
        - >
            find . \
                -name "*.h" -print0 \
                -o \
                -name "*.cc" -print0 | \
            xargs -0 -I {} -P $(nproc) \
                bash -c 'diff <(cat {}) <(clang-format {})'

check-license-header:
    stage: analyze
    image: $CI_REGISTRY_IMAGE/dev-real:$CI_COMMIT_REF_SLUG
    script:
        - >
            grep \
                --recursive \
                --exclude-dir='.git' \
                --exclude='*.json' \
                --exclude='*.txt' \
                --files-without-match "Apache License" \
                .

check-script:
    stage: analyze
    image: $CI_REGISTRY_IMAGE/dev-real:$CI_COMMIT_REF_SLUG
    script:
        - find . -name "*.py" -print0 | xargs -0 python3 -m black --check
        - find . -name "*.py" -print0 | xargs -0 python3 -m pylint --generated-members 'h5py\.File'
        - find . -name "*.py" -print0 | xargs -0 python3 -m mypy --python-version 3.9 --ignore-missing
        - find . -name "*.py" -print0 | xargs -0 python3 -m doctest

.build-library: &build-library
    stage: build
    script:
        - useradd developer
        - mkdir build
        - chown developer:developer build
        - >
            su developer -c '
                cd build
                cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="--coverage -Werror -Wall -Wextra -Wpedantic" .. &&
                cmake --build . &&
                GTEST_OUTPUT="xml:gtest-results.xml" ctest --output-on-failure --exclude-regex ".*_mpi$" &&
                ctest --output-on-failure --tests-regex ".*_mpi$" &&
                python3 -m gcovr --print-summary --xml coverage.xml -j$(nproc) --root .. .
            '
    artifacts:
        reports:
            cobertura: build/coverage.xml
            junit: build/*/test/gtest-results.xml
        when: always

build-library-real:
    image: $CI_REGISTRY_IMAGE/dev-real:$CI_COMMIT_REF_SLUG
    <<: *build-library

build-library-complex:
    image: $CI_REGISTRY_IMAGE/dev-complex:$CI_COMMIT_REF_SLUG
    <<: *build-library

.install-library: &install-library
    stage: build
    script:
        - mkdir build
        - >
            bash -c '
                cd build &&
                cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug .. &&
                cmake --build . --target install
            '
        - mkdir build-examples
        - >
            bash -c '
                cd build-examples &&
                cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug ../examples &&
                cmake --build .
            '

install-library-real:
    image: $CI_REGISTRY_IMAGE/dev-real:$CI_COMMIT_REF_SLUG
    <<: *install-library

install-library-complex:
    image: $CI_REGISTRY_IMAGE/dev-complex:$CI_COMMIT_REF_SLUG
    <<: *install-library

build-documentation:
    stage: build
    image: $CI_REGISTRY_IMAGE/docu:$CI_COMMIT_REF_SLUG
    script:
        - mkdir build
        - >
            bash -c '
                cd build &&
                ../docs/build_documentation
            '
    artifacts:
        paths:
            - build/build/latex/ae108.pdf
        expose_as: manual
